{"version":3,"sources":["photos/Profile.jpg","components/Header/Header.js","components/MastHead/MastHead.js","components/About/About.js","components/Gallery/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","to","MastHead","style","letterSpacing","fontSize","display","AboutMe","src","ProfilePic","height","Gallery","justifyContent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,qC,oPCc5BC,G,MAVA,SAACC,GAEZ,OACI,yBAAKC,UAAU,iCACP,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,4BAAvB,QACA,kBAAC,IAAD,CAAMC,GAAG,WAAWD,UAAU,iBAA9B,cCMDE,G,MAZE,SAACH,GAEd,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,YACX,0BAAMG,MAAO,CAACC,cAAc,OAAQC,SAAS,OAAQC,QAAQ,SAAUN,UAAU,2BAAjF,gBACA,0BAAMG,MAAO,CAACC,cAAc,OAAQC,SAAS,OAAQC,QAAQ,SAAUN,UAAU,2BAAjF,iB,yBCIDO,EATC,SAACR,GAEb,OACI,yBAAKC,UAAU,iBACP,yBAAKA,UAAU,aAAaQ,IAAKC,IAAYC,OAAO,YCkBrDC,G,MAtBC,SAACZ,GAEb,OACI,yBAAKC,UAAU,YACX,wBAAIA,UAAU,sBAAd,WACA,yBAAKA,UAAU,QAAQG,MAAO,CAAEG,QAAS,OAAQM,eAAgB,iBAC7D,sCACA,uCAEJ,yBAAKZ,UAAU,kBACX,yBAAKA,UAAU,4BACf,yBAAKA,UAAU,4BACf,yBAAKA,UAAU,4BACf,yBAAKA,UAAU,4BACf,yBAAKA,UAAU,gCCAhBa,MAXf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAD,KACA,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bcfa53ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Profile.b6c7378a.jpg\";","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport \"./Header.css\";\r\n\r\nconst Header = (props) => {\r\n    \r\n    return (\r\n        <div className=\"header white row center-align\">\r\n                <Link to=\"/\" className=\"col s12 m6 l1 offset-l10\">Home</Link>\r\n                <Link to=\"/contact\" className=\"col s12 m6 l1\">Contact</Link>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport './MastHead.css';\r\n\r\nconst MastHead = (props) => {\r\n\r\n    return (\r\n        <div className=\"masthead\">\r\n            <div className=\"name-box\">\r\n                <span style={{letterSpacing:'10px', fontSize:'2rem', display:'block'}} className=\"white-text center-align\">SUVOJIT DHAR</span>\r\n                <span style={{letterSpacing:'10px', fontSize:'2rem', display:'block'}} className=\"white-text center-align\">CHOWDHURY</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MastHead;","import React from 'react';\r\nimport './About.css';\r\nimport ProfilePic from '../../photos/Profile.jpg';\r\n\r\nconst AboutMe = (props) => {\r\n\r\n    return (\r\n        <div className=\"aboutme white\">\r\n                <img className=\"profilePic\" src={ProfilePic} height=\"250px\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AboutMe;","import React from 'react';\r\nimport './Gallery.css';\r\nimport ImageCard from './ImageCard';\r\n\r\nconst Gallery = (props) => {\r\n\r\n    return (\r\n        <div className=\"gallery \">\r\n            <h4 className=\"center-align white\">GALLERY</h4>\r\n            <div className=\"white\" style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n                <h6>PHOTOS</h6>\r\n                <h6>VIDEOS</h6>\r\n            </div>\r\n            <div className=\"cards-list row\">\r\n                <div className=\"col s12 m6 l3 card-item\"></div>\r\n                <div className=\"col s12 m6 l3 card-item\"></div>\r\n                <div className=\"col s12 m6 l3 card-item\"></div>\r\n                <div className=\"col s12 m6 l3 card-item\"></div>\r\n                <div className=\"col s12 m6 l3 card-item\"></div>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Gallery;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport MastHead from './components/MastHead/MastHead';\nimport AboutMe from './components/About/About';\nimport Gallery from './components/Gallery/Gallery';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <MastHead/>\n      <AboutMe/>\n      <Gallery/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}